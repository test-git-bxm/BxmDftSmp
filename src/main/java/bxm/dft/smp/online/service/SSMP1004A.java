package bxm.dft.smp.online.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import bxm.dft.app.DefaultApplicationException;
import bxm.common.annotaion.BxmCategory;
import bxm.dft.context.DefaultApplicationContext;
import bxm.container.annotation.BxmService;
import bxm.container.annotation.BxmServiceOperation;
import bxm.dft.smp.online.bean.MSmpEmpInfMng02;
import bxm.dft.smp.online.dbio.dto.DSmpEmpTst000Dto;
import bxm.dft.smp.online.service.dto.SSMP1004A001InDto;
import bxm.dft.smp.online.service.dto.SSMP1004A001OutDto;
import bxm.dft.smp.online.service.dto.SSMP1004A001OutDtoSubGrid01;

/**
 * <b>BXM Service class</b>
 * <p>
 * <b>Revision history</b><br>
 * <pre>
 * 2017.11.14 : New creation
 * </pre>
 *
 * @since 2017.11.14
 * @version 1.0.0
 * @author Education
 */
@BxmService("SSMP1004A")
@BxmCategory(logicalName = "Dynamic sql", description = "Dynamic sql")
public class SSMP1004A {
	final Logger logger = LoggerFactory.getLogger(this.getClass());

	private MSmpEmpInfMng02 mSmpEmpInfMng02;

	@BxmServiceOperation("ssmp1004a001")
	@BxmCategory(logicalName = "Dynamic sql", description = "Dynamic sql")
	public SSMP1004A001OutDto ssmp1004a001(SSMP1004A001InDto input)
			throws DefaultApplicationException {

		logger.debug("============== SERVICE START ==============");
		logger.debug("input = {}", input);

		mSmpEmpInfMng02 = DefaultApplicationContext.getBean(mSmpEmpInfMng02, MSmpEmpInfMng02.class);

		/**
		 * @BXMType VariableDeclaration
		 */
		SSMP1004A001OutDto output = new SSMP1004A001OutDto();
		
		/**
		 * @BXMType VariableDeclaration
		 */
		SSMP1004A001OutDtoSubGrid01 outDtoSub01 = null;
		
		/**
		 * @BXMType VariableDeclaration
		 */
		List<DSmpEmpTst000Dto> beanOutput = null;
		
		/**
		 * @BXMType VariableDeclaration
		 */
		DSmpEmpTst000Dto beanInput = new DSmpEmpTst000Dto();

		/**
		 * @BXMType LogicalArea
		 * @Desc DTO mapping
		 */
		{
			beanInput.setFeduEmpNo(input.getFeduEmpNo());
			beanInput.setFeduEmpNm(input.getFeduEmpNm());
			beanInput.setFeduOccpNm(input.getFeduOccpNm());
			beanInput.setFeduMngrEmpNo(input.getFeduMngrEmpNo());
			beanInput.setFeduIpsaDt(input.getFeduIpsaDt());
			beanInput.setFeduPayAmt(input.getFeduPayAmt());
			beanInput.setFeduDeptNo(input.getFeduDeptNo());
		}

		/**
		 * @BXMType IF
		 * @Desc condition : service type
		 */
		if("A".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(if)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByIfTest(beanInput);
		}
		else if("B".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(choose)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByChoose(beanInput);
		}
		else if("C".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(trim)
			 */
			int modifyCnt = mSmpEmpInfMng02.getEmpByTrim(beanInput);
			logger.debug("modifyCnt = {} ", modifyCnt);
		}
		else if("D".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(set)
			 */
			int modifyCnt = mSmpEmpInfMng02.getEmpBySet(beanInput);
			logger.debug("modifyCnt = {} ", modifyCnt);
		}
		else if("E".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(equalsIgnoreCase)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByEqualsIgnoreCase(beanInput);
		}
		else if("F".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(eq)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByEq(beanInput);
		}
		else if("G".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(constants compare)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByConstant(beanInput);
		}
		else if("H".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(foreach)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByForeachIncludeDto(beanInput);
		}
		else if("I".equals(input.getGubun()))
		{
			/**
			 * @BXMType BeanCall
			 * @Desc Call bean method for dynamic sql(foreach)
			 */
			beanOutput = mSmpEmpInfMng02.getEmpByForeachStringArray(beanInput);
		}
		else
		{
			/**
			 * @BXMType ApplicationException
			 * @Desc invalid service type
			 */
			throw new DefaultApplicationException("BXME0005", new Object[] { input.getGubun() } );
		}

		/**
		 * @BXMType LogicalArea
		 */
		{
			output.setGrid01_COUNT(beanOutput.size());
		}

		/**
		 * @BXMType Loop
		 * @Desc output dto mapping
		 */
		for (DSmpEmpTst000Dto fetchDto : beanOutput)
		{
			outDtoSub01 = new SSMP1004A001OutDtoSubGrid01();
			// Generated by code generator [[
			outDtoSub01.setFeduEmpNo(fetchDto.getFeduEmpNo());
			outDtoSub01.setFeduEmpNm(fetchDto.getFeduEmpNm());
			outDtoSub01.setFeduOccpNm(fetchDto.getFeduOccpNm());
			outDtoSub01.setFeduMngrEmpNo(fetchDto.getFeduMngrEmpNo());
			outDtoSub01.setFeduIpsaDt(fetchDto.getFeduIpsaDt());
			outDtoSub01.setFeduPayAmt(fetchDto.getFeduPayAmt());
			outDtoSub01.setFeduDeptNo(fetchDto.getFeduDeptNo());
			// Generated by code generator ]]

			output.getGrid01().add(outDtoSub01);
		}
		
		/**
		 * @BXMType LogicalArea
		 * @Desc add message
		 */
		{
			DefaultApplicationContext.addMessage("BXMI60000", null, new Object[] { });
		}

		logger.debug("output = {}", output);
		logger.debug("============== SERVICE END ==============");

		return output;
	}
}

